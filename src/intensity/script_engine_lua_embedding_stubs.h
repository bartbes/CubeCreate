#define STDREG(name) { #name, __script__##name }

using namespace MessageSystem;

luaL_Reg CAPI[] = {
    STDREG(echo),
    // general
    STDREG(currTime),
    // Math extensions
    STDREG(lsh),
    STDREG(rsh),
    STDREG(bor),
    STDREG(band),
    // Entity management
    STDREG(unregisterLogicEntity),
    STDREG(placeInWorld),
    STDREG(setupExtent),
    STDREG(setupCharacter),
    STDREG(setupNonSauer),
    STDREG(dismantleExtent),
    STDREG(dismantleCharacter),
    // Entity attribs
    STDREG(setAnimation),
    STDREG(getStartTime),
    STDREG(setModelName),
    STDREG(setSoundName),
    STDREG(setSoundVolume),
    STDREG(setAttachments_raw),
    STDREG(getAttachmentPosition),
    STDREG(setCanMove),
    // Extents
    STDREG(getAttr1),
    STDREG(getAttr2),
    STDREG(getAttr3),
    STDREG(getAttr4),
    STDREG(setAttr1),
    STDREG(setAttr2),
    STDREG(setAttr3),
    STDREG(setAttr4),
    STDREG(FAST_setAttr1),
    STDREG(FAST_setAttr2),
    STDREG(FAST_setAttr3),
    STDREG(FAST_setAttr4),
    STDREG(getCollisionRadiusWidth),
    STDREG(getCollisionRadiusHeight),
    STDREG(setCollisionRadiusWidth),
    STDREG(setCollisionRadiusHeight),
    STDREG(getExtentO_raw),
    STDREG(setExtentO_raw),
    // Dynents
    STDREG(getMaxSpeed),
    STDREG(getRadius),
    STDREG(getEyeHeight),
    STDREG(getAboveeye),
    STDREG(getYaw),
    STDREG(getPitch),
    STDREG(getMove),
    STDREG(getStrafe),
    STDREG(getYawing),
    STDREG(getPitching),
    STDREG(getJumping),
    STDREG(getBlocked),
    STDREG(getMapDefinedPositionData),
    STDREG(getClientState),
    STDREG(getPhysicalState),
    STDREG(getInWater),
    STDREG(getTimeInAir),
    STDREG(setMaxSpeed),
    STDREG(setRadius),
    STDREG(setEyeHeight),
    STDREG(setAboveeye),
    STDREG(setYaw),
    STDREG(setPitch),
    STDREG(setMove),
    STDREG(setStrafe),
    STDREG(setYawing),
    STDREG(setPitching),
    STDREG(setJumping),
    STDREG(setBlocked),
    STDREG(setMapDefinedPositionData),
    STDREG(setClientState),
    STDREG(setPhysicalState),
    STDREG(setInWater),
    STDREG(setTimeInAir),
    STDREG(getDynentO_raw),
    STDREG(setDynentO_raw),
    STDREG(getDynentVel_raw),
    STDREG(setDynentVel_raw),
    STDREG(getDynentFalling_raw),
    STDREG(setDynentFalling_raw),
    // Geometry utilities
    STDREG(rayLos),
    STDREG(rayPos),
    STDREG(rayFloor),
    // World
    STDREG(isColliding),
    STDREG(setGravity),
    STDREG(getMaterial),
    // Textures
    STDREG(convertPNGtoDDS),
    STDREG(combineImages),
    // sounds
#ifdef CLIENT
    STDREG(playSoundByName),
    STDREG(stopSoundByName),
#endif
    STDREG(music),
    STDREG(underwaterAmbient),
    STDREG(preloadSound),
    STDREG(playSound),
    // effects
#ifdef CLIENT
    STDREG(addDecal),
    STDREG(particleSplash),
    STDREG(particleSplashRegular),
    STDREG(particleFireball),
    STDREG(particleExplodeSplash),
    STDREG(particleFlare),
    STDREG(particleFlyingFlare),
    STDREG(particleTrail),
    STDREG(particleFlame),
    STDREG(addDynlight),
    STDREG(spawnDebris),
    STDREG(particleMeter),
    STDREG(particleText),
    STDREG(clientDamageEffect),
    STDREG(showHUDRect),
    STDREG(showHUDImage),
    STDREG(showHUDText),
#endif
    // messages
    STDREG(PersonalServerMessage),
    STDREG(ParticleSplashToClients),
    STDREG(ParticleSplashRegularToClients),
    STDREG(SoundToClientsByName),
    STDREG(StateDataChangeRequest),
    STDREG(UnreliableStateDataChangeRequest),
    STDREG(NotifyNumEntities),
    STDREG(LogicEntityCompleteNotification),
    STDREG(LogicEntityRemoval),
    STDREG(StateDataUpdate),
    STDREG(UnreliableStateDataUpdate),
    STDREG(DoClick),
    STDREG(ExtentCompleteNotification),
    // file access
    STDREG(readFile),
    // mapping
    STDREG(textureReset),
    STDREG(texture),
    STDREG(mapmodelReset),
    STDREG(mapmodel),
    STDREG(autograss),
    STDREG(texLayer),
    STDREG(texAlpha),
    STDREG(texColor),
    STDREG(texFFenv),
    STDREG(setShader),
    STDREG(setShaderParam),
    STDREG(materialReset),
    STDREG(loadStars),
    STDREG(loadSky),
    STDREG(loadSun),
    STDREG(loadClouds),
    STDREG(loadCloudLayer),
    STDREG(loadAltCloudLayer),
    STDREG(fogColor),
    STDREG(fog),
    STDREG(causticScale),
    STDREG(causticMillis),
    STDREG(waterSpecularity),
    STDREG(waterFog),
    STDREG(waterColor),
    STDREG(waterFallTint),
    STDREG(lavaFog),
    STDREG(lavaTint),
    STDREG(spinStars),
    STDREG(spinSky),
    STDREG(spinSun),
    STDREG(spinClouds),
    STDREG(spinCloudLayer),
    STDREG(spinAltCloudLayer),
    STDREG(yawStars),
    STDREG(yawSky),
    STDREG(yawSun),
    STDREG(yawClouds),
    STDREG(yawCloudLayer),
    STDREG(yawAltCloudLayer),
    STDREG(alphaSky),
    STDREG(alphaSun),
    STDREG(alphaClouds),
    STDREG(alphaCloudLayer),
    STDREG(alphaAltCloudLayer),
    STDREG(tintStars),
    STDREG(tintSky),
    STDREG(tintSun),
    STDREG(tintClouds),
    STDREG(tintCloudLayer),
    STDREG(tintAltCloudLayer),
    STDREG(cloudLayer),
    STDREG(altCloudLayer),
    STDREG(cloudScrollX),
    STDREG(altCloudScrollX),
    STDREG(cloudScrollY),
    STDREG(altCloudScrollY),
    STDREG(cloudScale),
    STDREG(altCloudScale),
    STDREG(cloudHeight),
    STDREG(altCloudHeight),
    STDREG(cloudFade),
    STDREG(altCloudFade),
    STDREG(cloudClip),
    STDREG(altCloudClip),
    STDREG(skyTexture),
    STDREG(texScroll),
    STDREG(shadowmapAngle),
    STDREG(shadowmapAmbient),
    STDREG(skylight),
    STDREG(blurSkylight),
    STDREG(tintAmbient),
    STDREG(tintFog),
    STDREG(ambient),
    STDREG(modelTweaks),
    STDREG(tweakModelAmbient),
    STDREG(tweakModelGlow),
    STDREG(tweakModelSpec),
    STDREG(tweakModelSpecGlare),
    STDREG(tweakModelGlowGlare),
    STDREG(tweakModelScale),
    // models
    STDREG(modelShadow),
    STDREG(modelCollide),
    STDREG(modelPerEntityCollisionBoxes),
    STDREG(modelEllipseCollide),
    STDREG(objLoad),
    STDREG(objSkin),
    STDREG(objBumpmap),
    STDREG(objEnvmap),
    STDREG(objSpec),
    STDREG(objPitch),
    STDREG(objAmbient),
    STDREG(objGlow),
    STDREG(objGlare),
    STDREG(objAlphatest),
    STDREG(objAlphablend),
    STDREG(objCullface),
    STDREG(objFullbright),
    STDREG(objShader),
    STDREG(objScroll),
    STDREG(objNoclip),
    STDREG(mdlAlphatest),
    STDREG(mdlAlphablend),
    STDREG(mdlAlphadepth),
    STDREG(mdlBb),
    STDREG(mdlExtendbb),
    STDREG(mdlScale),
    STDREG(mdlSpec),
    STDREG(mdlGlow),
    STDREG(mdlGlare),
    STDREG(mdlAmbient),
    STDREG(mdlCullface),
    STDREG(mdlDepthoffset),
    STDREG(mdlFullbright),
    STDREG(mdlSpin),
    STDREG(mdlShader),
    STDREG(mdlCollisionsOnlyForTriggering),
    STDREG(mdlTrans),
    STDREG(modelYaw),
    STDREG(modelPitch),
    STDREG(md2Pitch),
    STDREG(md2Anim),
    STDREG(md3Load),
    STDREG(md3Pitch),
    STDREG(md3Skin),
    STDREG(md3Spec),
    STDREG(md3Ambient),
    STDREG(md3Glow),
    STDREG(md3Glare),
    STDREG(md3Alphatest),
    STDREG(md3Alphablend),
    STDREG(md3Cullface),
    STDREG(md3Envmap),
    STDREG(md3Bumpmap),
    STDREG(md3Fullbright),
    STDREG(md3Shader),
    STDREG(md3Scroll),
    STDREG(md3Anim),
    STDREG(md3Link),
    STDREG(md3Noclip),
    STDREG(md5Dir),
    STDREG(md5Load),
    STDREG(md5Skin),
    STDREG(md5Bumpmap),
    STDREG(md5Envmap),
    STDREG(md5Alphatest),
    STDREG(md5Alphablend),
    STDREG(md5Adjust),
    STDREG(md5Spec),
    STDREG(md5Ambient),
    STDREG(md5Glow),
    STDREG(md5Glare),
    STDREG(md5Cullface),
    STDREG(md5Fullbright),
    STDREG(md5Shader),
    STDREG(md5Scroll),
    STDREG(md5Link),
    STDREG(md5Noclip),
    STDREG(md5Tag),
    STDREG(md5Anim),
    STDREG(md5Animpart),
    STDREG(md5Pitch),
    STDREG(iqmDir),
    STDREG(iqmLoad),
    STDREG(iqmTag),
    STDREG(iqmPitch),
    STDREG(iqmAdjust),
    STDREG(iqmSkin),
    STDREG(iqmSpec),
    STDREG(iqmAmbient),
    STDREG(iqmGlow),
    STDREG(iqmGlare),
    STDREG(iqmAlphatest),
    STDREG(iqmAlphablend),
    STDREG(iqmCullface),
    STDREG(iqmEnvmap),
    STDREG(iqmBumpmap),
    STDREG(iqmFullbright),
    STDREG(iqmShader),
    STDREG(iqmScroll),
    STDREG(iqmAnimpart),
    STDREG(iqmAnim),
    STDREG(iqmLink),
    STDREG(iqmNoclip),
    STDREG(smdDir),
    STDREG(smdLoad),
    STDREG(smdTag),
    STDREG(smdPitch),
    STDREG(smdAdjust),
    STDREG(smdSkin),
    STDREG(smdSpec),
    STDREG(smdAmbient),
    STDREG(smdGlow),
    STDREG(smdGlare),
    STDREG(smdAlphatest),
    STDREG(smdAlphablend),
    STDREG(smdCullface),
    STDREG(smdEnvmap),
    STDREG(smdBumpmap),
    STDREG(smdFullbright),
    STDREG(smdShader),
    STDREG(smdScroll),
    STDREG(smdAnimpart),
    STDREG(smdAnim),
    STDREG(smdLink),
    STDREG(smdNoclip),
    STDREG(rdVert),
    STDREG(rdEye),
    STDREG(rdTri),
    STDREG(rdJoint),
    STDREG(rdLimitDist),
    STDREG(rdLimitRot),
    STDREG(rdAnimJoints),
    STDREG(mdlEnvmap),
    // Keyboard
    STDREG(isKeyDown),
    STDREG(isKeyUp),
    STDREG(isMouseDown),
    STDREG(isMouseUp),
    // Code
    STDREG(compile),
    // Components
    STDREG(signalComponent),
    // Models
    STDREG(preloadModel),
    STDREG(reloadModel),
#ifdef CLIENT
    // HUD
    STDREG(getTargetPosition),
    STDREG(getTargetEntity),
    STDREG(useMinimap),
    STDREG(usedMinimap),
    STDREG(minimapMinZoom),
    STDREG(minimapMaxZoom),
    STDREG(minimapRadius),
    STDREG(minimapPositionX),
    STDREG(minimapPositionY),
    STDREG(minimapRotation),
    STDREG(minimapSidesNum),
    STDREG(minimapAlignRight),
    // Rendering
    STDREG(renderModel2),
    STDREG(renderModel3),
    // GUI
    STDREG(showMessage),
    STDREG(showInputDialog),
    STDREG(setDefaultThirdpersonMode),
    // Network
    STDREG(connect),
    // Camera
    STDREG(forceCamera),
    STDREG(forcePosition),
    STDREG(forceYaw),
    STDREG(forcePitch),
    STDREG(forceRoll),
    STDREG(forceFov),
    STDREG(resetCamera),
    STDREG(getCamera),
    STDREG(getCameraPosition),
    // Models
    STDREG(modelBoundingBox),
    STDREG(modelCollisionBox),
    STDREG(modelMesh),
#endif
    // NPCs/bots
#ifdef SERVER
    STDREG(addNPC),
    STDREG(removeNPC),
#endif
    // data/ stuff and var accessors
    STDREG(keymap),
    STDREG(registerSound),
    STDREG(font),
    STDREG(fontOffset),
    STDREG(fontChar),
    STDREG(keymap),
    STDREG(registerSound),
    STDREG(font),
    STDREG(fontOffset),
    STDREG(fontChar),
    STDREG(getVariable),
    STDREG(setVariable),
    {0,0}
};
