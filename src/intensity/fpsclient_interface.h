
// Copyright 2010 Alon Zakai ('kripken'). All rights reserved.
// This file is part of Syntensity/the Intensity Engine, an open source project. See COPYING.txt for licensing.

struct CharacterInfo;

//! The fpsclient class is critical in Sauerbraten, but it is accessible only to its interior
//! members, which are generated by including them in. Instead, we allow interfacing with that
//! class to our exterior systems through this interface.

struct fpsent;

struct FPSClientInterface
{
    //! Number of dynamic entities (dynents, movables, monsters, etc.) in the system
    static int            numDynamicEntities();

    //! Get the i-th dynamic entity in the system
    static dynent*        iterDynamicEntities(int i);

    //! Gets an extentity using its index in the list of entities
    static extentity*     getEntity(int index);

    //! Creates an fpsent for a client number (needs to be cast)
    static dynent*        newClient(int clientNumber);

    //! Gets the fpsent for a particular client number (needs to be cast). NOT the index in fpsclient->players, but the
    //! actual clientnum (which is server-determined and unique in a session)
    static dynent*        getPlayerByNumber(int clientNumber);

    //! Gets the number of players (PCs, NPCs)
    static int            getNumPlayers();

    //! Gets the client's player
    static dynent*        getClientPlayer();

    //! A client disconnected
    static void           clientDisconnected(int clientNumber);

    //! Set the position of a player in an appropriate spawn location (usually the single Playerstart
    static void           spawnPlayer(dynent* player);

    //! ShootV interface - shoots projectiles
    static void           shootV(int gun, vec &from, vec &to, dynent *d, bool local, boost::python::object onHit);

    #ifdef CLIENT
        //! Spawns some debris (broken flying fragments) at a location
        static void           spawnDebris(int type, vec& v, int numdebris, vec& debrisvel, dynent* owner);
    #endif

    //! Updates the position of a client, dealing with overlaps and such
    static void updatePosition(fpsent *d);

    static int smoothmove();
    static int smoothdist();
};

